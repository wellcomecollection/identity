steps:
  - name: "Run linting"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "/app/.buildkite/scripts/linting.sh"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - ecr#v2.2.0:
          login: true
      - docker-compose#v4.9.0:
          run: app
          config: .buildkite/docker-compose.yml
          shell: ["/bin/bash", "-e", "-c"] # So bash scripts can be sourced


  - name: "Run tests"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "yarn install --frozen-lockfile"
      - "yarn build"
      - "yarn test"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - ecr#v2.2.0:
          login: true
      - docker-compose#v4.9.0:
          run: app
          config: .buildkite/docker-compose.yml
          shell: ["/bin/bash", "-e", "-c"] # So bash scripts can be sourced
          env:
            - BUILDKITE_BRANCH
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  # Build the Auth0 scripts (just to check for successful compilation)
  - name: "Build Auth0 scripts"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "yarn --frozen-lockfile"
      - "yarn build-auth0-database-scripts"
      - "yarn build-auth0-actions"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - ecr#v2.2.0:
          login: true
      - docker-compose#v4.9.0:
          run: app
          config: .buildkite/docker-compose.yml
          shell: ["/bin/bash", "-e", "-c"] # So bash scripts can be sourced


  - wait

  - name: "Package the AWS Lambda functions"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh --init-terraform"
      - "yarn install --frozen-lockfile"
      - "yarn build"
      - "yarn package-api-templates"
      # This step means we don't bundle devDependencies into the lambdas
      - "yarn install --frozen-lockfile --production=true"
      - "/app/.buildkite/scripts/aws-lambda-packaging.sh"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - ecr#v2.2.0:
          login: true
      - docker-compose#v4.9.0:
          run: app
          mount-ssh-agent: true # For Terraform to fetch modules
          config: .buildkite/docker-compose.yml
          shell: ["/bin/bash", "-e", "-c"] # So bash scripts can be sourced
          env:
            - BUILDKITE_BRANCH
            - BUILDKITE_COMMIT
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  - wait

  - name: "Deploy to stage"
    branches: "main"
    trigger: "identity-deploy-stage"
    async: true
    build:
      message: "${BUILDKITE_MESSAGE}"
      commit: "${BUILDKITE_COMMIT}"
      branch: "${BUILDKITE_BRANCH}"
      env:
        BUILDKITE_PULL_REQUEST: "${BUILDKITE_PULL_REQUEST}"
        BUILDKITE_PULL_REQUEST_BASE_BRANCH: "${BUILDKITE_PULL_REQUEST_BASE_BRANCH}"
        BUILDKITE_PULL_REQUEST_REPO: "${BUILDKITE_PULL_REQUEST_REPO}"

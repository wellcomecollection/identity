steps:

  # Carry out some basic linting across the codebase.
  - name: "linting"
    command:
      - "/app/.buildkite/scripts/linting.sh"
    plugins:
      - docker-compose#v3.7.0:
          run: app
          config: .buildkite/docker-compose.yml

  - wait

  # Build the AWS Lambda Functions.
  - name: "aws-lambda-build"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "yarn install"
      - "yarn run -- lerna run build"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - docker-compose#v3.7.0:
          run: app
          config: .buildkite/docker-compose.yml
          env:
            - BUILDKITE_BRANCH
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  - wait

  # Run the AWS Lambda Function tests.
  - name: "aws-lambda-tests"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "yarn run test"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - docker-compose#v3.7.0:
          run: app
          config: .buildkite/docker-compose.yml
          env:
            - BUILDKITE_BRANCH
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  - wait

  # Package and persist the Auth0 scripts.
  - name: "auth0-packaging"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "/app/.buildkite/scripts/auth0-packaging.sh"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - docker-compose#v3.7.0:
          run: app
          config: .buildkite/docker-compose.yml
          env:
            - BUILDKITE_BRANCH
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  # Package and persist the AWS Lambda Functions.
  - name: "aws-lambda-packaging"
    command:
      - ". /app/.buildkite/scripts/init-environment.sh"
      - "/app/.buildkite/scripts/aws-lambda-packaging.sh"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::770700576653:role/identity-ci"
      - docker-compose#v3.7.0:
          run: app
          config: .buildkite/docker-compose.yml
          env:
            - BUILDKITE_BRANCH
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

  - wait

  # Trigger a CD of the codebase using the 'identity-deployment' pipeline.. We only want to do this
  # for the 'main' branch, and we default to the 'stage' environment and the 'v1' stage of the API
  # Gateway.
  - name: "deploy"
    branches: "main"
    trigger: "identity-deployment"
    build:
      message: "${BUILDKITE_MESSAGE}"
      commit: "${BUILDKITE_COMMIT}"
      branch: "${BUILDKITE_BRANCH}"
      env:
        DEPLOY_ENVIRONMENT: "stage" # Default for CD
        DEPLOY_API_GATEWAY_STAGE: "v1" # Default for CD
